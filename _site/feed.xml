<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="viggi.me/feed.xml" rel="self" type="application/atom+xml" /><link href="viggi.me/" rel="alternate" type="text/html" /><updated>2018-07-09T12:03:13+02:00</updated><id>viggi.me/</id><title type="html">Blog| Vighnesh Velayudhan</title><subtitle>Just another undergrad trying to be a Geek</subtitle><author><name>Vighnesh Velayudhan</name><email>vighneshvelayudhan@gmail.com</email></author><entry><title type="html">What were FPGAs again?</title><link href="viggi.me/2018-07-08/what-were-fpgas-again" rel="alternate" type="text/html" title="What were FPGAs again?" /><published>2018-07-08T00:00:00+02:00</published><updated>2018-07-08T00:00:00+02:00</updated><id>viggi.me/2018-07-08/what-were-fpgas-again</id><content type="html" xml:base="viggi.me/2018-07-08/what-were-fpgas-again">&lt;p&gt;It did take me quite some time(3 minutes) and some effort(reading a &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;Wikipedia article&lt;/a&gt;) to convince myself that VHDL was not originally written to “code” FPGAs.&lt;/p&gt;

&lt;p&gt;We all would have probably seen a breadboard before; it is a simple prototyping tool with horizontal or vertical connections and we can plug in components and make any circuit we want, with it, constrained to the availability of slots. FPGAs are just the same when we talk about what it offers. They originally have a set of Look Up Tables(LUTs) and DSP blocks. We can set the logic output for any input combinations in an LUT, not necessarily explainable by a simple function like &lt;code class=&quot;highlighter-rouge&quot;&gt;d = a xor b xor c&lt;/code&gt;. DSP blocks are tiny processing element with multipliers and adders inside, which are of fixed-length, and could be used for faster computation. And when we are “coding” an FPGA, what we are essentially doing is, describing a hardware, using any Hardware Description Language like VHDL or Verilog, and then using a synthesiser to generate an appropriate circuit made up of these LUTs and DSP Blocks which would best describe the hardware we wrote using out HDL. It makes FPGAs and the way we configure it using VHDL, entirely different from other embedded systems for two reasons,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We are not “programming” per se, we are designing a hardware.&lt;/li&gt;
  &lt;li&gt;VHDL is not a sequentially executable language, and the code isn’t “running” in my hardware, it is getting implemented on it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-it-feels-like-to-do-something-in-vhdl&quot;&gt;How it feels like to do something in VHDL&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Disclaimer: I am writing this blog in a way everyone would be able to understand it. This is not intended to teach you VHDL, but to give you a fun reading experience about what’s happening there. Also, while learning VHDL, for quite a long time, I had treated it like any other programming language, so had a lot of misconceptions about it. So most of my content in this blog are things which surprised me or gave me a nice, good feeling. That said, if you are already an expert in VHDL, you may not find these very surprising.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, since VHDL is a description language, and since it does not get executed sequentially always, except for &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; blocks, it gives us a much different approach to getting things done. Now, I am taking up the liberty to not go through an entire tutorial to VHDL, but show you something fun, and these are the points you need to know in the worst case.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;signal&lt;/code&gt; is &lt;em&gt;like&lt;/em&gt; a variable in C, for the use case, but acts like a &lt;em&gt;wire&lt;/em&gt; in the physical sense(?!)(&lt;em&gt;There is something called variable too in VHDL, not necessary for right now&lt;/em&gt;)(&lt;em&gt;wires gets interesting later, in Verilog&lt;/em&gt;). For the time being, we can “store stuff” in a signal.&lt;/li&gt;
  &lt;li&gt;Inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;, statements get executed sequentially.&lt;/li&gt;
  &lt;li&gt;Assignment is done with an operator that looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;, and even if we assign a signal with some value inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;, the signal gets updated only after the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; is done.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; is invoked only if any signal mentioned in it’s sensitivity list changes.&lt;/li&gt;
  &lt;li&gt;Just to mess up with your mind, it is just a fact that a &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; gets executed in zero time, about which I hope to write better in future. You can read &lt;a href=&quot;https://stackoverflow.com/q/13954193/6319742&quot;&gt;this&lt;/a&gt;, which has pretty great answers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now coming to the problem.&lt;/p&gt;

&lt;p&gt;What we are trying to do is to make a circuit, which will have three inputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ain&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Cin&lt;/code&gt;, and finds an output &lt;code class=&quot;highlighter-rouge&quot;&gt;SumR = Ain*Bin + Cin&lt;/code&gt;. And we have to try to make this circuit take up less space, and also try to make sure it gets a better performance, for instance, if we have a 1000 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ain&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bin&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;Cin&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Now if we directly do &lt;code class=&quot;highlighter-rouge&quot;&gt;SumR = Ain*Bin + Cin&lt;/code&gt;, the synthesiser is forced to generate hardware which would find this result in a single clock cycle, since &lt;code class=&quot;highlighter-rouge&quot;&gt;SumR&lt;/code&gt; must be updated right after the process. But we want to avoid it by trading off speed, by making a dummy signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;MulR = Ain*Bin&lt;/code&gt; and then later doing &lt;code class=&quot;highlighter-rouge&quot;&gt;SumR &amp;lt;= MulR + Cin&lt;/code&gt;. So here is a simple VHDL snippet, which I personally loved.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vhdl&quot; data-lang=&quot;vhdl&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;-- Assume Ain,Bin and Cin are 8 bit width signals, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- or Standard Logic Vectors.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Assume we have a clock signal as an input, called clk.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AinR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CinR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MulR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SumR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;std_logic_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;c1&quot;&gt;-- by this, we mention that clk should be in the &lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;-- sensitivity list of the process&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;AinR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BinR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CinR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;MulR&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AinR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CinR2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;SumR&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MulR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CinR2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The seemingly harmless (and jobless) assignments of &lt;code class=&quot;highlighter-rouge&quot;&gt;AinR&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;BinR&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;CinR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CinR2&lt;/code&gt; adds a pretty magical change to this code, and makes it &lt;strong&gt;Pipelined!!!&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pipelining is a technique used in a lot of areas to increase throughput. Imagine you have a single copy of a 30-page document and 30 students, and each student takes a single minute to read a single page. Instead of giving the entire document as such to the first student, then him finishing it, passing on to the second student etc would take 900 minutes for the process to finish. Instead, if we split the document to 30 individual pages, and give the first student the first page, and ask him to take the second page and pass on the first one once he is done, we can finish the task in (30 + 29) = 59 minutes, and this math is intuitive. This is the basic idea of pipelining, to break down a process into tinier processes, so that we can ensure maximum use of resources. The initial 30 minutes delay in this example is called &lt;em&gt;latency&lt;/em&gt; of the design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, since we know that every signal update happens only after process gets suspended, &lt;code class=&quot;highlighter-rouge&quot;&gt;AinR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BinR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CinR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CinR2&lt;/code&gt; acts like slots in a conveyor belt. The circuit generated more or less looks like this,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/2018-07-08-what-were-fpgas-again/pipeline.png&quot; alt=&quot;pipeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;The actual interconnects generated would depend on the FPGA used, and it may take up a single DSP block and extra flip flops in most cases.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;So the extra assignments inside a process statement forced the synthesiser to reserve extra flip-flops for each signal, and thus we can feed in a set of 1000 inputs and still get the complete output in 1003 clock cycles instead of 3000 clock cycles.&lt;/p&gt;

&lt;p&gt;This was the simplified version of the multiplier unit I used in my project, and I had to make sure my synthesiser would implement this in a DSP block, as the FPGA I was working with(&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/fpga/artix-7.html&quot;&gt;Artix 7&lt;/a&gt;) had plenty(740) of them. Also, with the expense of few extra LUTs per multiplier, I was able to get a much better throughput. I thought, I really thought, “Ah, problem solved! This was easy” and went on the weekend trip to Rome, which effectively spoiled Dominos and Pizza-Hut for the rest of my life. Sorry Onesta though, I knew you sucked even before I went to Rome.&lt;/p&gt;</content><author><name>@viggi-v</name></author><summary type="html">It did take me quite some time(3 minutes) and some effort(reading a Wikipedia article) to convince myself that VHDL was not originally written to “code” FPGAs.</summary></entry><entry><title type="html">How I met VHDL</title><link href="viggi.me/2018-07-05/how-I-met-vhdl" rel="alternate" type="text/html" title="How I met VHDL" /><published>2018-07-05T00:00:00+02:00</published><updated>2018-07-05T00:00:00+02:00</updated><id>viggi.me/2018-07-05/how-I-met-vhdl</id><content type="html" xml:base="viggi.me/2018-07-05/how-I-met-vhdl">&lt;p&gt;This is my first post, and I wish my blog to be a mix of a little bit of tech that I know about and how did I reach there. More or less like Ted Mosby, but with different stacks instead of different girls. And thanks to the &lt;a href=&quot;https://nitk.ac.in&quot;&gt;University&lt;/a&gt; I go to and the bunch of super geeks I see at &lt;a href=&quot;https://ieee-nitk.github.io&quot;&gt;IEEE NITK&lt;/a&gt;, I have multiple &lt;a href=&quot;https://ieee-nitk.github.io/team.html&quot;&gt;Barney Stinson’s&lt;/a&gt; in my life.&lt;/p&gt;

&lt;p&gt;So it all started in 2016, 1st of January when my resolution was to learn web dev. Basically, new year eve I was in the hostel, in my room, thanks to the hostel timings, so the way new year appeared in my life was as a Google doodle which was an egg till 31st 23:59:59 and hatched exactly at midnight. So the freshman decided to learn “Hypertext Preprocessor”(:P) back then because he had noticed the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;facebook.com/home.php&lt;/code&gt;. So if I write a code in PHP, say something like this,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and saved it as &lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;, double-click that file, it just showed the exact same thing in my browser too, aw, come on! Why can’t google chrome execute a simple PHP file? This sucks. Chrome sucks.&lt;/p&gt;

&lt;p&gt;It took me four months, to figure out stuff.&lt;/p&gt;

&lt;p&gt;And back then I was a do-it-all by myself kind guy with limited googling skills, with an awesome experience in writing code which next day would look like overcooked spaghetti kept in a freezer. Coming back to college, I realized I hated electronics, so I used to still tweak and try out stuff with js even during exam times, including stuff like a snake game.&lt;/p&gt;

&lt;p&gt;Meanwhile, I had joined IEEE NITK, and my first project was in NLP. To be honest I joined the project because AI sounded cool. And oh, I was still with windows. So the initial reading assignments were fun, I was reading the famous &lt;a href=&quot;http://www.deeplearningbook.org/&quot;&gt;Deep Learning Book&lt;/a&gt; and things were cool. Once we started coding, obviously I never got to a phase where tensorflow would run in my conda environment set up in a Windows 8 running on an i3 machine, so I ended up, tada! making the UI for the project. Needless to say, I was lazy to get acquainted by the development cycle for ML, and was comfortable with setting up a project in Laravel, writing migrations and creating a Rest API wrapping with an angular front end. So never explored further.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/2018-07-05-how-I-met-vhdl/php.jpeg&quot; alt=&quot;php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During summer, due to all the bashings I got from seniors and the world of memes called the internet, I decided to leave till then what I used to call as my mother tongue, PHP, and learn MEAN Stack. Mainly because till then first search result for MEAN was mean girls in my laptop and, also, I found an awesome site called &lt;a href=&quot;https://scotch.io&quot;&gt;scotch.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being a developer(sorry for calling myself so), I loved all my courses which included hitting the keyboard. Be it in Matlab(Digital Signal Processing), assembly(microprocessors) or VHDL(digital system design). So I met VHDL in a university course, as a continuation of our Digital Electronics course, taken by the same prof. Her teaching style forced us to do a lot more of VHDL by ourselves, and I gradually started liking it. After all we were just making simple FSMs and basic circuits, in a board with tens of thousands of lookup tables and 100s of DSPs(Sorry, but you can just think of it like buying a kit to make biriyani and then just taking a pinch of spices from it, tasting and saying “voila!”). Needless to say never bothered to check anything other than the right LEDs blinking in the board(which, as you are going to see soon, backfires). With additional knowledge about memes on VHDL as well, I figured out that I can call myself good in VHDL and indeed, added it to my resume and LinkedIn.&lt;/p&gt;

&lt;p&gt;Now fast forward to May 7, 2018, and I promise I will come back on how I and VHDL were on a break and I tried Verilog, but another day.&lt;/p&gt;

&lt;h2 id=&quot;my-internship-at-hepia-geneva&quot;&gt;My Internship at HEPIA, Geneva.&lt;/h2&gt;

&lt;p&gt;I had a research internship offer from &lt;a href=&quot;http://hepia.hesge.ch/&quot;&gt;HEPIA&lt;/a&gt; on the field of &lt;strong&gt;Deep Learning on FPGAs&lt;/strong&gt;. Yeah, you heard it right :P.&lt;/p&gt;

&lt;p&gt;With my knowledge of how feedforward nets work, zero coding experience in tensorflow or torch, and basic VHDL skills, I grabbed my passport and went on an adventure. And for a month all I did was to read 10+ research papers and blogs every day on (insert every alphabet here)NNs, and how to compress their trained net size or how to parallelize them. Due to &lt;a href=&quot;https://karpathy.github.io/2015/05/21/rnn-effectiveness/&quot;&gt;many reasons&lt;/a&gt;, I found LSTMs super cool, and I learnt about it in a &lt;a href=&quot;https://colah.github.io/posts/2015-08-Understanding-LSTMs/&quot;&gt;fun way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So now comes a lot of stories about me meddling with VHDL, and sometimes even begging and crying in front of the monitor to get it running. I personally felt that JS or any web dev community is like French people, super sweet while VHDL community is like Germans, and I don’t wanna talk about them (&lt;em&gt;or about the multiple questions I ended up deleting in electronics stack exchange due to the excessive number of downvotes and mean comments&lt;/em&gt;). So my next few posts would be VHDL based, but I promise you that I will explain it in a way everyone would understand.&lt;/p&gt;</content><author><name>@viggi-v</name></author><summary type="html">This is my first post, and I wish my blog to be a mix of a little bit of tech that I know about and how did I reach there. More or less like Ted Mosby, but with different stacks instead of different girls. And thanks to the University I go to and the bunch of super geeks I see at IEEE NITK, I have multiple Barney Stinson’s in my life.</summary></entry></feed>